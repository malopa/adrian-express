{"version":3,"sources":["index.d.ts"],"names":["NativeModules","MediaType","MultipleImagePicker"],"mappings":"AAAA,SAASA,aAAT,QAAqC,cAArC;AAEA,WAAYC,SAAZ;;WAAYA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;AAAAA,EAAAA,S;GAAAA,S,KAAAA,S;;AAqGZ,MAAM;AAAEC,EAAAA;AAAF,IAA0BF,aAAhC;AAEA,eAAeE,mBAAf","sourcesContent":["import { NativeModules, Image } from 'react-native';\n\nexport enum MediaType {\n  VIDEO = 'video',\n  IMAGE = 'image',\n  ALL = 'all',\n}\n\nexport type Results = {\n  path: string;\n  fileName: string;\n  localIdentifier: string;\n  width: number;\n  height: number;\n  mime: string;\n  size: number;\n  bucketId?: number;\n  realPath?: string;\n  parentFolderName?: string;\n  creationDate?: string;\n};\n\nexport interface VideoResults extends Results {\n  type: MediaType.VIDEO;\n  thumbnail?: string;\n}\n\nexport interface ImageResults extends Results {\n  type: MediaType.IMAGE;\n  thumbnail?: undefined;\n}\n\nexport type PickerErrorCode =\n  | 'PICKER_CANCELLED'\n  | 'NO_LIBRARY_PERMISSION'\n  | 'NO_CAMERA_PERMISSION';\n\nexport type Options<T extends MediaType = MediaType.ALL> = {\n  mediaType?: T;\n  isPreview?: boolean;\n  selectedColor?: string;\n  tapHereToChange?: string;\n  cancelTitle?: string;\n  doneTitle?: string;\n  emptyMessage?: string;\n  emptyImage?: Image;\n  selectMessage?: string;\n  deselectMessage?: string;\n  usedCameraButton?: boolean;\n  usedPrefetch?: boolean;\n  previewAtForceTouch?: boolean;\n  allowedLivePhotos?: boolean;\n  allowedVideo?: boolean;\n  allowedAlbumCloudShared?: boolean;\n  allowedPhotograph?: boolean; // for camera ?: allow this option when you want to take a photos\n  allowedVideoRecording?: boolean; //for camera ?: allow this option when you want to recording video.\n  maxVideoDuration?: Number; //for camera ?: max video recording duration\n  autoPlay?: boolean;\n  muteAudio?: boolean;\n  preventAutomaticLimitedAccessAlert?: boolean; // newest iOS 14\n  numberOfColumn?: number;\n  maxSelectedAssets?: number;\n  fetchOption?: Object;\n  fetchCollectionOption?: Object;\n  maximumMessageTitle?: string;\n  maximumMessage?: string;\n  messageTitleButton?: string;\n  //resize thumbnail\n  thumbnailWidth?: number;\n  thumbnailHeight?: number;\n  haveThumbnail?: boolean;\n};\n\nexport interface SinglePickerOptions {\n  selectedAssets?: Results;\n  singleSelectedMode: true;\n}\n\nexport interface MultiPickerOptions {\n  selectedAssets?: Results[];\n  singleSelectedMode?: false;\n}\n\ninterface MediaTypeOptions {\n  [MediaType.VIDEO]: { isExportThumbnail?: boolean };\n  [MediaType.ALL]: MediaTypeOptions[MediaType.VIDEO];\n}\n\ninterface MediaTypeResults {\n  [MediaType.IMAGE]: ImageResults;\n  [MediaType.VIDEO]: VideoResults;\n  [MediaType.ALL]: ImageResults | VideoResults;\n}\n\ntype MultipleImagePickerType = {\n  openPicker<T extends MediaType = MediaType.ALL>(\n    options: MultiPickerOptions & MediaTypeOptions[T] & Options<T>\n  ): Promise<MediaTypeResults[T][]>;\n  openPicker<T extends MediaType = MediaType.ALL>(\n    options: SinglePickerOptions & MediaTypeOptions[T] & Options<T>\n  ): Promise<MediaTypeResults[T]>;\n};\n\nconst { MultipleImagePicker } = NativeModules;\n\nexport default MultipleImagePicker as MultipleImagePickerType;\n"]}