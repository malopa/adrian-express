{"version":3,"names":["React","render","MaskedText","describe","test","container","expect","getByText","toBeTruthy","toMatchSnapshot","prefix","decimalSeparator","groupSeparator","precision","toHaveStyle","fontWeight","fontStyle","textDecorationLine"],"sources":["MaskedText.test.tsx"],"sourcesContent":["import React from 'react'\nimport { render } from '@testing-library/react-native';\nimport { MaskedText } from './MaskedText';\n\ndescribe('<MaskedText />', () => {\n  test('should renders correctly with custom mask', () => {\n    const container = render(<MaskedText mask=\"AAA-999\">RCT777</MaskedText>);\n\n    expect(container.getByText('RCT-777')).toBeTruthy();\n\n    expect(container).toMatchSnapshot();\n  });\n\n  test('should renders correctly with currency mask', () => {\n    const container = render(\n      <MaskedText\n        type=\"currency\"\n        options={{\n          prefix: '$',\n          decimalSeparator: '.',\n          groupSeparator: ',',\n          precision: 2,\n        }}\n      >\n        5999\n      </MaskedText>\n    );\n\n    expect(container.getByText('$59.99')).toBeTruthy();\n\n    expect(container).toMatchSnapshot();\n  });\n  test('should be bold when the textBold attribute is added', () => {\n    const container  =\n    render(<MaskedText textBold mask=\"99/99/9999\">\n        30081990\n      </MaskedText>)\n      expect(container.getByText('30/08/1990')).toHaveStyle({fontWeight: 'bold' });\n    });\n    test('should be italic when the textItalic attribute is added', () => {\n      const container  =\n      render(<MaskedText textItalic mask=\"99/99/9999\">\n          30081990\n        </MaskedText>)\n        expect(container.getByText('30/08/1990')).toHaveStyle({fontStyle: 'italic' });\n    });\n    test('should be the line style added to the text when the textDecoration attribute has a non-null value', () => {\n      const textDecorationLine = 'underline'\n      const container  =\n      render(<MaskedText textDecoration={textDecorationLine} mask=\"99/99/9999\">\n          30081990\n        </MaskedText>)\n        expect(container.getByText('30/08/1990')).toHaveStyle({textDecorationLine: textDecorationLine });\n    });    \n})\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,MAAM,QAAQ,+BAA+B;AACtD,SAASC,UAAU,QAAQ,cAAc;AAEzCC,QAAQ,CAAC,gBAAgB,EAAE,MAAM;EAC/BC,IAAI,CAAC,2CAA2C,EAAE,MAAM;IACtD,MAAMC,SAAS,GAAGJ,MAAM,eAAC,oBAAC,UAAU;MAAC,IAAI,EAAC;IAAS,YAAoB,CAAC;IAExEK,MAAM,CAACD,SAAS,CAACE,SAAS,CAAC,SAAS,CAAC,CAAC,CAACC,UAAU,EAAE;IAEnDF,MAAM,CAACD,SAAS,CAAC,CAACI,eAAe,EAAE;EACrC,CAAC,CAAC;EAEFL,IAAI,CAAC,6CAA6C,EAAE,MAAM;IACxD,MAAMC,SAAS,GAAGJ,MAAM,eACtB,oBAAC,UAAU;MACT,IAAI,EAAC,UAAU;MACf,OAAO,EAAE;QACPS,MAAM,EAAE,GAAG;QACXC,gBAAgB,EAAE,GAAG;QACrBC,cAAc,EAAE,GAAG;QACnBC,SAAS,EAAE;MACb;IAAE,UAGS,CACd;IAEDP,MAAM,CAACD,SAAS,CAACE,SAAS,CAAC,QAAQ,CAAC,CAAC,CAACC,UAAU,EAAE;IAElDF,MAAM,CAACD,SAAS,CAAC,CAACI,eAAe,EAAE;EACrC,CAAC,CAAC;EACFL,IAAI,CAAC,qDAAqD,EAAE,MAAM;IAChE,MAAMC,SAAS,GACfJ,MAAM,eAAC,oBAAC,UAAU;MAAC,QAAQ;MAAC,IAAI,EAAC;IAAY,cAE9B,CAAC;IACdK,MAAM,CAACD,SAAS,CAACE,SAAS,CAAC,YAAY,CAAC,CAAC,CAACO,WAAW,CAAC;MAACC,UAAU,EAAE;IAAO,CAAC,CAAC;EAC9E,CAAC,CAAC;EACFX,IAAI,CAAC,yDAAyD,EAAE,MAAM;IACpE,MAAMC,SAAS,GACfJ,MAAM,eAAC,oBAAC,UAAU;MAAC,UAAU;MAAC,IAAI,EAAC;IAAY,cAEhC,CAAC;IACdK,MAAM,CAACD,SAAS,CAACE,SAAS,CAAC,YAAY,CAAC,CAAC,CAACO,WAAW,CAAC;MAACE,SAAS,EAAE;IAAS,CAAC,CAAC;EACjF,CAAC,CAAC;EACFZ,IAAI,CAAC,mGAAmG,EAAE,MAAM;IAC9G,MAAMa,kBAAkB,GAAG,WAAW;IACtC,MAAMZ,SAAS,GACfJ,MAAM,eAAC,oBAAC,UAAU;MAAC,cAAc,EAAEgB,kBAAmB;MAAC,IAAI,EAAC;IAAY,cAEzD,CAAC;IACdX,MAAM,CAACD,SAAS,CAACE,SAAS,CAAC,YAAY,CAAC,CAAC,CAACO,WAAW,CAAC;MAACG,kBAAkB,EAAEA;IAAmB,CAAC,CAAC;EACpG,CAAC,CAAC;AACN,CAAC,CAAC"}